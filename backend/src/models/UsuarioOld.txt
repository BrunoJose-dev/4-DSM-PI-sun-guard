import mongoose from 'mongoose'

const esquema = mongoose.Schema({
  // _id é automático no Mongoose
  nome: { type: String, required: true },
  email: { type: String, required: true, index: { unique: true} },
  data_nascimento: { type: Date, required: true },
  fototipo: { type: String, required: true },
  senha: { type: String, required: true }
})

/*
  Parâmetros de mongoose.model
  1º ~> Nome do model (inicial maiúscula)
  2º ~> o esquema definido acima
  3º ~> nome da collection no BD (inicial minúscula, plural)
*\

export default mongoose.model('Usuario', esquema, 'usuarios')


-------------------------------------------------


import mongoose from 'mongoose';
import bcrypt from 'bcrypt';

// Definindo o esquema de usuário
const esquema = new mongoose.Schema({
  nome: { type: String, required: true },
  email: { type: String, required: true, index: { unique: true } },
  data_nascimento: { type: Date, required: true },
  fototipo: { type: String, required: true },
  senha: { type: String, required: true }
});

// Middleware para criptografar a senha antes de salvar
esquema.pre('save', async function(next) {
  const usuario = this;

  if (!usuario.isModified('senha')) return next();

  try {
    const salt = await bcrypt.genSalt(10);
    const hash = await bcrypt.hash(usuario.senha, salt);
    usuario.senha = hash;
    next();
  } catch (err) {
    next(err);
  }
});

// Método para comparar senha ao fazer login
esquema.methods.compararSenha = function(senhaEntrada) {
  return bcrypt.compare(senhaEntrada, this.senha);
};

// Exportar o modelo
const Usuario = mongoose.model('Usuario', esquema);
export default Usuario;
